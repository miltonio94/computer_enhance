#+title: 1.1 Instruction decoding on the 8086
#+author: Milton
#+description: Notes on part 1.1 of Computer, Enhance course by Casey Muratori

* Table of content :toc:
- [[#notes-from-the-video][Notes from the video]]
- [[#notes-from-the-manual][Notes from the manual]]

* Notes from the video
Inside CPU's of this era there where things called registers. These registers where physical storage inside the CPU.
Each of these had 16bits storage size. They had names such as ~AX~, ~BX~, ~CX~, etc.
In those days you'd physically move memory into a register to do operations on them and then move them back into memory.

Before we start emulating the CPU we first have to figure out how the CPU knows how to do these operations. This is where ==Instruction Decode== comes into place.

What is it:
This is a process that happens in the CPU where it takes an encoded instruction stream and does it.

We are going to start of with the move register instruction set. Why is it called move? This is because of Intel's mnemonic. It'd be more accurate to think of it as a copy. As the data does not disappear from the source, it is copied though.

Here's how that would look like in assembly
#+begin_src asm
mov AX, BX
#+end_src

In this case we are moving ~BX~ into ~AX~. You could think of it as saying Register ~BX = AX~

Lets start thinking about how that is encoded.
The register to register move instruction in this architecture is encoded in two bytes (remember, each byte is made up of 8bits).
We interpret the two bytes in the order that they come. The first byte describes the instruction plus some flags for the instruction. The first 6bits is for the move instruction, this is ~100010~ followed by two flags (can be thought of as parameters), we are going to call them D and W for now, so the first byte will look something like this ~10010DW~.
The second byte can be broken down into three groups. The first group is 2bit long and it is called the ~MOD~ field, followed by the ~REG~ field and finally the ~R/M~ field. The ~REG~ and ~RM~ fields are each 3bits long. This second byte can also be thought of as parameters for the instructions.

So far, we have it concrete how to figure out if it is a move register to register instruction. The first  6bits of the first byte encodes that as ~100010~. Now lets figure out what the rest is.

The ~MOD~ field indicates if this is a memory or register operation. The encoding for ~MOD~ for register to register operation is the bit pattern ~11~.
The ~REG~ and ~R/M~ field will both encode a register. The ~REG~ field is a register field so that's what it encodes, the ~R/M~ field for this operation will also encode a register. This field though can be either a register or a memory encoding. But because we have set this move operation as a register to register operation (remember that the first two  bits of this second byte has been set to ~11~ which is the encoding of a register to register operation) in this context it will also be a register encoding.

Now we need to know which of the two registers that we have encoded is the destination and which one is the source. That's where that ~D~ bit comes into play. If the ~D~ bit is set to one it means that the register field is the destination. If it's set to 0 it is the source. We can figure out what the ~R/M~ field is from there. ~D~ stands for direction.

Now comes the ~W~ field. The ~W~ stands for wide and it tells the CPU if we are doing a 16bit operation or an 8bit operation. If the ~W~ bit has been set to 1 it means we are doing a 16bit instruction otherwise we are doing an 8bit instruction.

How to know what bit instruction set corresponds to which register is up to a table provided by Intel at the time. But figuring out what register we are targeting is dependent on both the ~W~ field and the (in this context) the registers fields.

A little note on the register names. If the register is named ~AX~ like above, it means we want to copy the whole register (16bits). If it's named ~AL~ it means we only want to copy the low bits. And correspondingly if it's called ~AH~ it means we only want to copy the high bits.
To summarize, if a register's name ends in X we want to operate on the whole register, if it ends with a L we want to operate on the low bits and if it ends in a H we want to operate on the high bits.

* Notes from the manual
| OPCODE | D    | W    | MOD   | REG   | RM    |
|--------+------+------+-------+-------+-------|
| 6 bits | 1bit | 1bit | 2bits | 3bits | 3bits |
|--------+------+------+-------+-------+-------|



| Field | Value  | Function                                            |
|-------+--------+-----------------------------------------------------|
| W     | 0 or 1 | Instruction operation on byte or word data          |
| D     | 0 or 1 | Defines if the REG field is a source or destination |
|-------+--------+-----------------------------------------------------|



| Mod field encoding |                                            |
|--------------------+--------------------------------------------|
|               Code | Explanation                                |
|--------------------+--------------------------------------------|
|                 00 | Memory mode                                |
|                 01 | Memory mode, 8 bit displacement follows    |
|                 10 | Register mode, 16 bit displacement follows |
|                 11 | Register mode, no displacement             |
|--------------------+--------------------------------------------|



| Register Field Encoding |       |       |
|-------------------------+-------+-------|
|                     Reg | W = 0 | W = 1 |
|-------------------------+-------+-------|
|                     000 | AL    | AX    |
|                     001 | CL    | CX    |
|                     010 | DL    | DX    |
|                     011 | BL    | BX    |
|                     100 | AH    | SP    |
|                     101 | CH    | BP    |
|                     110 | DH    | SI    |
|                     111 | BH    | DI    |
|-------------------------+-------+-------|



| Register/Memory field encoding |       |       |
|--------------------------------+-------+-------|
|                  when MOD = 11 |       |       |
|--------------------------------+-------+-------|
|                            R/M | W = 0 | W = 1 |
|--------------------------------+-------+-------|
|                            000 | AL    | AX    |
|                            001 | CL    | CX    |
|                            010 | DL    | DX    |
|                            011 | BL    | BX    |
|                            100 | AH    | SP    |
|                            101 | CH    | BP    |
|                            110 | DH    | SI    |
|                            111 | BH    | DI    |
|--------------------------------+-------+-------|



| Name | OPCODE | D | W | MOD | REG | R/M |
|------+--------+---+---+-----+-----+-----|
| MOV  | 100010 | _ | _ |  11 | _   | _   |

Now we have most of the information to write a disassembler for this one move. We need to figure out how to disassemble the first line the ~bits 16~
